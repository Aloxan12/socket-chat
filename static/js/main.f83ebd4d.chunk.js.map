{"version":3,"sources":["components/app/App.module.css","api/api.ts","store/chatReducer.ts","components/app/App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","api","socket","createConnection","this","io","subscribe","initMessagesHandler","newInitMessageHandler","userTypingHandler","on","destroyConnection","disconnect","sendName","name","emit","sendMessage","message","typeMessage","initialState","messages","typingUsers","App","dispatch","useDispatch","useSelector","state","chat","useState","setMessage","setName","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","useEffect","type","messagesReceived","newMessageReceived","user","typingUserAdded","messageAnchorRef","current","scrollIntoView","behavior","useRef","className","style","chatBlock","chatWrap","onScroll","e","element","currentTarget","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","map","m","id","u","ref","value","onChange","onClick","setClientName","onKeyPress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,uBAAuB,SAAW,sBAAsB,SAAW,sBAAsB,YAAc,2B,gKCK/IC,EAAM,CACfC,OAAQ,KACRC,iBAFe,WAGXC,KAAKF,OAASG,aAAG,iDAGrBC,UANe,SAMLC,EACAC,EACAC,GAA6C,IAAD,MAElD,UAAAL,KAAKF,cAAL,SAAaQ,GAAG,0BAA2BH,GAC3C,UAAAH,KAAKF,cAAL,SAAaQ,GAAG,mBAAoBF,GACpC,UAAAJ,KAAKF,cAAL,SAAaQ,GAAG,cAAeD,IAEnCE,kBAde,WAcM,IAAD,EAChB,UAAAP,KAAKF,cAAL,SAAaU,aACbR,KAAKF,OAAS,MAElBW,SAlBe,SAkBNC,GAAc,IAAD,EAClB,UAAAV,KAAKF,cAAL,SAAaa,KAAK,mBAAoBD,IAE1CE,YArBe,SAqBHC,GAAiB,IAAD,EACxB,UAAAb,KAAKF,cAAL,SAAaa,KAAK,sBAAuBE,IAE7CC,YAxBe,WAwBD,IAAD,EACT,UAAAd,KAAKF,cAAL,SAAaa,KAAK,kBCnBpBI,EAAe,CACjBC,SAAU,GACVC,YAAa,I,OC6FFC,MA5Ff,WACI,IAAMC,EAAWC,cACXJ,EAAWK,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,KAAKP,YAC9EC,EAAcI,aAA2C,SAAAC,GAAK,OAAIA,EAAMC,KAAKN,eAHxE,EAMmBO,mBAAS,IAN5B,mBAMJX,EANI,KAMKY,EANL,OAOaD,mBAAS,QAPtB,mBAOJd,EAPI,KAOEgB,EAPF,OAQyCF,oBAAS,GARlD,mBAQJG,EARI,KAQgBC,EARhB,OAS+BJ,mBAAS,GATxC,mBASJK,EATI,KASWC,EATX,KAWXC,qBAAU,WAGN,OAFAZ,GDgB8B,SAACA,GACnCtB,EAAIE,mBACJF,EAAIK,WAAU,SAACc,GACXG,EARwB,SAACH,GAAD,MAA6B,CAACgB,KAAK,oBAAqBhB,YAQvEiB,CAAiBjB,OAE1B,SAACH,GACDM,EAV0B,SAACN,GAAD,MAAiB,CAACmB,KAAK,uBAAwBnB,WAUhEqB,CAAmBrB,OAE5B,SAACsB,GACDhB,EAZuB,SAACgB,GAAD,MAAmB,CAACH,KAAK,oBAAqBG,QAY5DC,CAAgBD,UCvBlB,WACHhB,GDkCyB,SAACA,GAClCtB,EAAIU,0BCjCD,IAEHwB,qBAAU,WACmB,IAAD,EAApBJ,IACA,UAAAU,EAAiBC,eAAjB,SAA0BC,eAAe,CAACC,SAAU,cAEzD,CAACxB,IAEJ,IAAMqB,EAAmBI,iBAAuB,MAEhD,OACI,qBAAKC,UAAWC,IAAMzB,IAAtB,SACI,sBAAKwB,UAAWC,IAAMC,UAAtB,UACI,sBACIF,UAAWC,IAAME,SACjBC,SAAU,SAACC,GACP,IAAIC,EAAUD,EAAEE,cACVC,EAAoBF,EAAQG,aAAeH,EAAQI,aAErDJ,EAAQK,UAAYxB,GAAiByB,KAAKC,IAAIL,EAAoBF,EAAQK,WAAa,GACvFzB,GAAsB,GAEtBA,GAAsB,GAE1BE,EAAiBkB,EAAQK,YAXjC,UAaKrC,EAASwC,KAAI,SAACC,GACX,OACI,gCACI,8BAAIA,EAAEtB,KAAKzB,KAAX,OADJ,IAC2B+C,EAAE5C,QACzB,yBAFM4C,EAAEC,OAMnBzC,EAAYuC,KAAI,SAACG,GACd,OACI,gCACI,8BAAIA,EAAEjD,KAAN,OADJ,OAEI,yBAFMiD,EAAED,OAMpB,qBAAKE,IAAKvB,OAEd,sBAAKK,UAAWC,IAAMlC,SAAtB,UACI,uBAAOoD,MAAOnD,EAAMoD,SAAU,SAACf,GAC3BrB,EAAQqB,EAAEE,cAAcY,UAE5B,wBAAQE,QAAS,WACb5C,ED1BI,SAACT,GAAD,OAAgB,SAACS,GACzCtB,EAAIY,SAASC,ICyBgBsD,CAActD,IACvBgB,EAAQ,KAFZ,0BAMJ,sBAAKgB,UAAWC,IAAM/B,YAAtB,UACI,0BACIiD,MAAOhD,EACPoD,WAAY,WACR9C,GD7BE,SAACA,GAC3BtB,EAAIiB,kBC8BgBgD,SAAU,SAACf,GACXtB,EAAWsB,EAAEE,cAAcY,UAG/B,wBAAQE,QAAS,WACb5C,EDvCE,SAACN,GAAD,OAAmB,SAACM,GAC1CtB,EAAIe,YAAYC,ICsCaD,CAAYC,IACrBY,EAAW,KAFf,mCClFLyC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCJRQ,EAAcC,YAAgB,CAChCrD,KHYuB,WAA6C,IAA5CD,EAA2C,uDAAnCP,EAAc8D,EAAqB,uCACnE,OAAQA,EAAO7C,MACX,IAAK,oBACH,OAAO,2BAAIV,GAAX,IAAkBN,SAAU6D,EAAO7D,WAErC,IAAK,uBACD,OAAO,2BAAIM,GAAX,IACIN,SAAS,GAAD,mBAAMM,EAAMN,UAAZ,CAAsB6D,EAAOhE,UACrCI,YAAaK,EAAML,YAAY6D,QAAO,SAACnB,GAAD,OAAiBA,EAAED,KAAOmB,EAAOhE,QAAQsB,KAAKuB,QAG5F,IAAK,oBACD,OAAO,2BAAIpC,GAAX,IACIL,YAAY,GAAD,mBAAMK,EAAML,YAAY6D,QAAO,SAACnB,GAAD,OAAgBA,EAAED,KAAOmB,EAAO1C,KAAKuB,OAApE,CAAyEmB,EAAO1C,SAEnG,QACI,OAAOb,MG1BNyD,EAAQC,YAAYL,EAAaM,YAAgBC,MCA9DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGNO,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.f83ebd4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__yULup\",\"chatBlock\":\"App_chatBlock__2W8_u\",\"chatWrap\":\"App_chatWrap__1le8o\",\"sendName\":\"App_sendName__3tRGS\",\"sendMessage\":\"App_sendMessage__3K_iW\"};","import {io, Socket} from \"socket.io-client\";\r\nimport {MessagesType, UserType} from \"../store/chatReducer\";\r\n\r\n\r\n//const socket = io('http://localhost:3900/')\r\n\r\nexport const api = {\r\n    socket: null as null | Socket,\r\n    createConnection() {\r\n        this.socket = io('https://fast-brushlands-44568.herokuapp.com/')\r\n        //this.socket = io('http://localhost:3500/')\r\n    },\r\n    subscribe(initMessagesHandler: (messages: MessagesType[]) => void,\r\n              newInitMessageHandler: (message: string) => void,\r\n              userTypingHandler: (user: UserType) => void){\r\n\r\n        this.socket?.on('init-messages-published', initMessagesHandler)\r\n        this.socket?.on('new-message-sent', newInitMessageHandler)\r\n        this.socket?.on('user-typing', userTypingHandler)\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null\r\n    },\r\n    sendName(name: string){\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sendMessage(message: string){\r\n        this.socket?.emit('client-message-sent', message)\r\n    },\r\n    typeMessage(){\r\n        this.socket?.emit('client-typed')\r\n    }\r\n}\r\n","import {api} from \"../api/api\";\r\n\r\nexport type UserType ={\r\n    id: string,\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    message: string,\r\n    id: string,\r\n    user: UserType\r\n}\r\n\r\nconst initialState = {\r\n    messages: [] as MessagesType[],\r\n    typingUsers: [] as UserType[],\r\n}\r\ntype ActionType = ReturnType<typeof messagesReceived> | ReturnType<typeof newMessageReceived> | ReturnType<typeof typingUserAdded>\r\n\r\nexport const chatReducer = (state = initialState, action: ActionType)=>{\r\n    switch (action.type){\r\n        case 'messages-received':{\r\n          return {...state, messages: action.messages}\r\n        }\r\n        case 'new-message-received':{\r\n            return {...state,\r\n                messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter((u: UserType) => u.id !== action.message.user.id)\r\n            }\r\n        }\r\n        case 'typing-user-added':{\r\n            return {...state,\r\n                typingUsers: [...state.typingUsers.filter((u: UserType)=> u.id !== action.user.id), action.user]}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const messagesReceived = (messages: MessagesType[])=>({type:'messages-received', messages}as const)\r\nexport const newMessageReceived = (message: any)=>({type:'new-message-received', message}as const)\r\nexport const typingUserAdded = (user: UserType)=>({type:'typing-user-added', user}as const)\r\n\r\n\r\nexport const createConnection = () => (dispatch: any)=>{\r\n    api.createConnection()\r\n    api.subscribe((messages: MessagesType[])=>{\r\n        dispatch(messagesReceived(messages))\r\n        },\r\n        (message: any)=>{\r\n        dispatch(newMessageReceived(message))\r\n        },\r\n        (user: UserType)=>{\r\n        dispatch(typingUserAdded(user))\r\n        })\r\n}\r\nexport const setClientName =(name: string)=>(dispatch: any)=>{\r\n    api.sendName(name)\r\n}\r\nexport const sendMessage =(message: string)=>(dispatch: any)=>{\r\n    api.sendMessage(message)\r\n}\r\nexport const typeMessage =()=>(dispatch: any)=>{\r\n    api.typeMessage()\r\n}\r\nexport const destroyConnection =()=> (dispatch: any)=>{\r\n    api.destroyConnection()\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\nimport style from './App.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\nimport {\n    createConnection,\n    destroyConnection,\n    MessagesType,\n    sendMessage,\n    setClientName,\n    typeMessage, UserType\n} from \"../../store/chatReducer\";\n\n\n\nfunction App() {\n    const dispatch = useDispatch()\n    const messages = useSelector<AppStateType, Array<MessagesType>>(state => state.chat.messages)\n    const typingUsers = useSelector<AppStateType, Array<UserType>>(state => state.chat.typingUsers)\n\n    //const [messages, setMessages] = useState([])\n    const [message, setMessage] = useState('')\n    const [name, setName] = useState('Alex')\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true)\n    const [lastScrollTop, setLastScrollTop] = useState(0)\n\n    useEffect(() => {\n        dispatch(createConnection());\n\n        return ()=>{\n            dispatch(destroyConnection());\n        }\n    }, [])\n\n    useEffect(() => {\n        if (isAutoScrollActive) {\n            messageAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\n\n    return (\n        <div className={style.App}>\n            <div className={style.chatBlock}>\n                <div\n                    className={style.chatWrap}\n                    onScroll={(e) => {\n                        let element = e.currentTarget\n                        const maxScrollPosition = element.scrollHeight - element.clientHeight\n\n                        if (element.scrollTop > lastScrollTop && Math.abs(maxScrollPosition - element.scrollTop) < 10) {\n                            setIsAutoScrollActive(true)\n                        } else {\n                            setIsAutoScrollActive(false)\n                        }\n                        setLastScrollTop(element.scrollTop)\n                    }}>\n                    {messages.map((m: MessagesType) => {\n                        return (\n                            <div key={m.id}>\n                                <b>{m.user.name}:</b> {m.message}\n                                <hr/>\n                            </div>\n                        )\n                    })}\n                    {typingUsers.map((u: UserType) => {\n                        return (\n                            <div key={u.id}>\n                                <b>{u.name}:</b> ...\n                                <hr/>\n                            </div>\n                        )\n                    })}\n                    <div ref={messageAnchorRef}></div>\n                </div>\n                <div className={style.sendName}>\n                    <input value={name} onChange={(e) => {\n                        setName(e.currentTarget.value)\n                    }}/>\n                    <button onClick={() => {\n                        dispatch(setClientName(name))\n                        setName('')\n                    }}>Send Name\n                    </button>\n                </div>\n                <div className={style.sendMessage}>\n                    <textarea\n                        value={message}\n                        onKeyPress={()=>{\n                            dispatch(typeMessage())\n                        }}\n                        onChange={(e) => {\n                        setMessage(e.currentTarget.value)\n                    }}\n                    ></textarea>\n                    <button onClick={() => {\n                        dispatch(sendMessage(message))\n                        setMessage('')\n                    }}>Send message\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport {chatReducer} from \"./chatReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    chat: chatReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}